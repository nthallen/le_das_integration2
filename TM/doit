#! /bin/bash
doit=doit

function print_usage {
cat <<EOF
$doit [options]
  Starts Instrument operation
$doit [options] stop
  Send Quit command to running system (monarch_cmd)
$doit [options] not
  Shuts down any straggling processes after system has stopped (monarchctl -Q)
$doit [options] wait
  Does not interact with instrument until it is up and operating (monarchctl -S)

options:
  -h display this message
  -s use screen for text-mode data display (default)
  -a use ASCII chars for line-drawing
  -p <run> play back <run>
EOF
}

function select_arg {
  n=$1
  shift $n
  echo $1
}

statusready=no
function isready {
  quiet=no
  [ "$1" = "quiet" ] && quiet=yes
  msgf -2 "monarchctl $TM_OPT -VS"
  monarchctl $TM_OPT -VS 2>&1 |
  ( while read j; do
      [ $quiet = no ] && echo $j
      sj=${j#* Status: Ready:}
      if [ "$j" != "$sj" ]; then
        exit 0
      fi
    done
    exit 1
  ) && statusready=yes
}

srcmode=realtime
dispmode=screen
ncopts=''
while getopts "hap:st" opt; do
  case $opt in
    h) print_usage; exit 0;;
    a) ncopts='-a';;
    p) srcmode=playback; Run=$OPTARG;;
    s) dispmode=screen; dispmodescreen=1;;
    t) srcmode=SerIn;;
    \?) exit 1;; # getopts reports the error
    :) exit 1;; # getopts reports the error
  esac
done

# We haven't finished parsing the arguments, but we can
# be pretty sure whatever it is, we will need to read
# the configuration to execute it.
. /usr/local/libexec/load_exconfig.sh
msgProgram=$doit
[ -n "$CFG_ERROR" ] && msgf 3 "$CFG_ERROR"
[ -n "$FlightNode" ] && export FlightNode

arg=`select_arg $OPTIND $*`
case "$arg" in
  stop)
    echo "Trying to stop the instrument"
    monarch_cmd -V $CMD_OPT quit
    exit 0;;
  not)
    echo "Trying harder to stop the instrument"
    monarchctl $TM_OPT -VQ
    exit 0;;
  wait)
    [ $srcmode = playback ] &&
      msgf 3 "wait is not supported for playback"
    cmd=wait;;
  '') cmd=start;;
  *) msgf 3 "Invalid command: '$arg'";;
esac

if [ -n "$srcmode" ]; then
  [ "$srcmode" = "SerIn" -a -n "$Run" ] &&
    msgf 3 "Cannot specify both -t and -p"
else
  case "$SRCMODE" in
    SerIn) srcmode=SerIn;;
    InetIn) srcmode=InetIn;;
    *) srcmode=realtime;;
  esac
fi
[ $srcmode = SerIn ] && msgf 3 "SerIn is not configured"
case $dispmode in
  screen) nc=nc; ncopt=$ncopts;;
  pterm) nc=nc; ncopt=$ncopts;;
  photon) nc='';;
  *) msgf 3 "Unknown dispmode: '$dispmode'";;
esac

umask 2

# Check that we are running from the correct
# location. This code was more complicated
# under QNX to handle /net
[ -z "$CltHomeDir" ] && CltHomeDir=$HomeDir
dir=$PWD
[ "$dir" = "$CltHomeDir" ] ||
  msgf 3 "Not in CltHomeDir $CltHomeDir"

# We are now in 'start' or 'wait'
# srcmode is playback or realtime, though could eventually include
# SerIn and/or InetIn.

# mkdoit can add more logic here.
# We do not launch lclsrvr if $srcmode = realtime -a -z "$FlightNode"
# (i.e. running flight.sh on the local machine)
# The other $srcmodes (SerIn, InetIn) will default to playbacksrvr,
# but can be overridden.
#-----------------
# lclsrvr=playbacksrvr
# batchfile=interact
# client=playbackclt
# [ $srcmode = realtime ] && client=Democlt
# [ $srcmode = realtime -a $FltNode_Access = Local ] && lclsrvr=''

logfileroot=$Experiment
interacts='Demodisp Democlt';
extracts='';
batchfile=interact
client=playbackclt
[ $srcmode = realtime ] && client=Democlt
lclsrvr=playbacksrvr
# lcllogfile is the file we want local memo to write to
# rmtlogfile is the file we would like to display with less,
#  even if it is not really remote.
if [ $srcmode = realtime ]; then
  if [ $FltNode_Access = Remote ]; then
    lcllogfile=$logfileroot.clt.log
    rmtlogfile=$HomeDir/$logfileroot.log
  else
    lclsrvr=''
    rmtlogfile=$logfileroot.log
  fi
else # not realtime
  RemEx=$Experiment
  Experiment=$RemEx.PB.$session
  lcllogfile=$Experiment.log
fi

# At this point cmd can only be 'start' or 'wait'. Thus
# a) we always want to check paths, so don't need check_path
# b) startup var is redundant with cmd = start
# check_path=no
# startup=no
# case $cmd in
#   start) startup=yes; check_path=yes;;
#   stop);;
#   not);;
#   wait) check_path=yes;;
#   screen);;
#   *) nl_error "Invalid option: '$option'";;
# esac

# Determine the path. Strictly speaking, this does
# not have to happen before start, but I'd like
# to check that the required applications exist
VERSION=1.0
case $srcmode in
  playback)
    # Need to find the data
    ddir=`locate_rundir $Run | tr : /`
    [ -z "$ddir" ] && msgf 3 "Unable to locate run $Run"
    [ -f $ddir/VERSION ] && VERSION=`cat $ddir/VERSION`;;
  *)
    ddir=$HomeDir
    [ -f VERSION ] && VERSION=`cat VERSION`;;
esac

TMBINDIR=$PWD/bin/$VERSION
[ -d $TMBINDIR ] ||
  msgf 3 "Unable to locate bin dir for VERSION $VERSION"
export PATH=$TMBINDIR:$PATH

missing=''
for app in $interacts; do
  f=`which $app$nc`
  [ -n "$f" -a -x "$f" ] ||
    missing="$missing $app$nc"
done
for app in $extracts; do
  f=`which $app`
  [ -n "$f" -a -x "$f" ] ||
    missing="$missing $app"
done
[ -n "$missing" ] &&
  msgf 3 "Unable to locate required application(s):$missing"

#-----------------------------------------------------
# Everything before this point will be executed twice,
# once before starting screen, once after, so we should
# limit any informational messages.
if [ -z "$STY" ]; then
  # echo "cmd is '$cmd' srcmode is '$srcmode' dispmode is '$dispmode'"
  # hit_any_key
  screen -t $doit $0 $*
  clear # after exiting screen
  echo "$doit completed, screen closed"
  exit 0
fi

# Running under screen
session=$$
screen -X logfile "$doit.$session.log"
screen -X log on
screen -X split
screen -X focus
screen -X resize 3
screen -X focus
clear

# Until we have sessions, the only distinction we can make
# about where we connect is local or remote.
#
# Startup local memo: The only case where we would not want to
# start a local memo is if srcmode is realtime and there is no
# FlightNode. In that case, we are starting up an interact script
# on the local machine, and interact scripts start up their own
# memo.
[ -n "$lcllogfile" ] &&
  Launch memo memo -o $lcllogfile -l4

if [ $cmd = start ]; then
  if [ $srcmode = playback ]; then
    # Startup playback modules:
    Launch tm_bfr -s Unix
    Launch tm_gen rdr -P $ddir -a
    #   # playbacksrvr (started later via $lclsrvr)
  elif [ $srcmode = realtime ]; then
    if [ $SERVICE = Installed ]; then
      monarchctl_opt='-r'
      [ -n "$batchfile" ] && monarchctl_opt="-R $batchfile"
      msgf 0 "Running isready quiet, TM_OPT=$TM_OPT"
      isready quiet
      if [ $statusready = no ]; then
        msgf 0 "running monarchctl -V $TM_OPT $monarchctl_opt"
        monarchctl -V $TM_OPT $monarchctl_opt
        isready
      fi
    else
      msgf 0 "Starting flight.sh"
      screen -t flight.sh /usr/local/libexec/flight.sh
      msgf 0 "Waiting for memo"
      waitfor -q /var/run/monarch/$Experiment/memo forever
      msgVdefault=''
      sleep 1
      msgf 0 "Waiting for tm_bfr"
      waitfor -q /var/run/monarch/$Experiment/tm_bfr forever
      msgf 0 "found tm_bfr, waiting for cmd server"
      waitfor -q /var/run/monarch/$Experiment/cmd forever
    fi
  else
    msgf 3 "srcmode='$srcmode' not implemented in start"
  fi
elif [ $cmd = wait ]; then
  [ $srcmode = realtime ] || msgf 3 "Invalid srcmode '$srcmode'"
  msgf 0 "Waiting for startup"
  if [ $SERVICE = Installed ]; then
    while [ statusready = no ]; do
      isready quiet
      sleep 1
    done
  else
    waitfor /var/run/monarch/$Experiment/tm_bfr forever
    msgf 0 "found tm_bfr, waiting for command server"
    waitfor /var/run/monarch/$Experiment/server forever
  fi
else
  msgf 3 "Unexpected invalid cmd '$cmd'"
fi

# At this point, we can assume that memo, tm_bfr and server
# are running, so we can start all the UI clients
# Display programs, keyboard client, etc.
# We will point getcon and disp programs to the lclsrvr, but
# still need to figure out how to tell lclsrvr to quit.
# I guess I need a Stopper app to send Quit where I want.
# That would work for this as well as 'doit stop'.
[ -n "$lclsrvr" ] &&
  Launch cmd $lclsrvr
if [ -n "$rmtlogfile" ]; then
  # log="-Logfile \"less.$session.log\" -L"
  if [ $FltNode_Access = Remote ]; then
    msgf 0 "Starting less on remote system"
    screen -t logfile /bin/sh -c "echo \$\$ >less.pid.$session; exec $SSH_CMD less +F $rmtlogfile"
  else
    msgf 0 "Starting less on local system"
    screen -t logfile /bin/sh -c "echo \$\$ >less.pid.$session; exec less +F $rmtlogfile"
  fi
fi

# gcopt definition might need to be moved earlier if it
# needs to be defined conditionally
gcopt=-v
screen -t Demo /usr/local/sbin/getcon $gcopt scr1 $session
screen -X select Demo
screen -X width -w 22
#screen -x height -w 9
screen -t Demo2 /usr/local/sbin/getcon $gcopt scr2 $session
screen -X select Demo2
screen -X width -w 22
#screen -x height -w 9
screen -t Demo3 /usr/local/sbin/getcon $gcopt scr3 $session
screen -X select Demo3
screen -X width -w 22
#screen -x height -w 9
screen -t clt /usr/local/sbin/getcon -v clt $session
screen -X focus
screen -X select clt
screen -X height -w 2
screen -X width -w 80
screen -X focus
screen -X select $doit

msgf 0 Handling less.pid.$session
less_pid=''
if [ -f less.pid.$session ]; then
  less_pid=`cat less.pid.$session`
  rm -f less.pid.$session
  msg -V "Recovered less_pid='$less_pid'"
fi

# Now collect display consoles for each disp screen and clt
msgf 0 collecting screens
for screen in scr1 scr2 scr3 clt; do
  term=''
  if waitfor pty.$screen.$session 3; then
    term=`cat pty.$screen.$session`
    rm pty.$screen.$session
    eval ${screen}_term=$term
  else
    msgf 2 pty.$screen.$session did not appear
  fi
done

if [ -n "$scr1_term" -a -n "$scr2_term" -a -n "$scr3_term" ]; then
  msgf 0 "Starting Demodisp$nc $ncopt $TM_OPT $scr1_term $scr2_term $scr3_term"
  Launch -TMC- Demodisp$nc $ncopt $TM_OPT $scr1_term $scr2_term $scr3_term
  screen -X select Demo
else
  msgf 1 "Skipping Demodisp$nc"
fi

if [ -n $clt_term -o -n $scr1_term -o -n $scr2_term -o -n $scr3_term ]; then
  msgf 0 "Starting $client$nc $CMD_OPT $clt_term $scr1_term $scr2_term $scr3_term"
  $client$nc $CMD_OPT $clt_term $scr1_term $scr2_term $scr3_term
else
  msgf 2 "Unable to run client $client$nc due to missing ptys"
fi

# This is where we run. When the client quits,
# we are done and need to clean up
screen -X only
[ $dispmode != photon ] && /usr/local/sbin/getcon -v -e $session
[ -n "$lclsrvr" ] && monarch_cmd -V Quit
screen -X select logfile
sleep 1
if [ -n "$less_pid" ] && kill -0 $less_pid; then
  screen -X -p logfile stuff ^Cq
  sleep 1
  if kill -0 $less_pid 2>/dev/null; then
    msg -Vn $doit Follow up with kill to less
    kill $less_pid 2>/dev/null
  fi
fi

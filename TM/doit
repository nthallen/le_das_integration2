#! /bin/bash
#ifdef __USAGE
#%C [options]
#  Starts Instrument operation
#%C [options] stop
#  Send Quit command to running system
#%C [options] not
#  Shuts down any straggling processes after system has stopped
#%C [options] wait
#  Does not interact with instrument until it is up and operating
#
#options:
#	-s use screen for text-mode data display
#	-a use ASCII chars for line-drawing
#	-n use photon pterms for text-mode data display
#	-p <run> play back <run>
#	-i <host> use InetIn to read data from <host>
#	-t use SerIn as specified in doit
#	-S <session> specify the session (used internally)
#
# SerIn mode can also be indicated by setting environment
# variable SRCMODE=SerIn, typically in Experiment.config.
# InetIn can be specified by the same method.
#endif

function nl_error {
  msg -Vn doit "$*"
  exit 1
}

. /usr/local/libexec/load_exconfig.sh
[ -n "$CFG_ERROR" ] && nl_error "$CFG_ERROR"

# Check to make sure we are running in HomeDir
[ -z "$CltHomeDir" ] && CltHomeDir=$HomeDir
dir=$PWD
nnd=${dir%$CltHomeDir}
[ "$dir" = "$nnd" ] &&
  nl_error "Not in CltHomeDir $CltHomeDir"
if [ -n "$nnd" ]; then
  nd=${nnd#/net/}
  [ "$nd" = "$nnd" ] &&
    nl_error "Not in CltHomeDir $CltHomeDir (2)"
  [ "$nd" = "${nd#*/}" ] ||
    nl_error "Not in CltHomeDir $CltHomeDir (3)"
fi
FltNd=''

# Parse options to select
#   srcmode as one of realtime, InetIn, SerIn or playback
#   dispmode as one of screen, pterm or photon
session=$$
ncopts=''
while getopts "ai:p:S:snt" opt; do
  case $opt in
    a) ncopts='-a';;
    i) srcmode=InetIn; InetSrc=$OPTARG;;
    p) srcmode=playback; Run=$OPTARG;;
    s) dispmode=screen; dispmodescreen=1;;
    S) session=$OPTARG;;
    t) srcmode=SerIn;;
    n) dispmode=pterm; dispmodepterm=1;;
    \?) exit 1;; # getopts reports the error
    :) exit 1;; # getopts reports the error
  esac
done
if [ -n "$srcmode" ]; then
  [ -n "$InetSrc" -a -n "$Run" ] &&
    nl_error "Cannot specify both -i and -p"
else
  case "$SRCMODE" in
    SerIn) srcmode=SerIn;;
    InetIn) srcmode=InetIn;;
    *) srcmode=realtime;;
  esac
fi
if [ -n "$dispmode" ]; then
  [ -n "$dispmodescreen" -a -n "$dispmodepterm" ] &&
    nl_error "Cannot specify both -s and -n"
else
  dispmode=screen
  dispmodescreen=1
fi
[ $srcmode = SerIn ] && nl_error "SerIn is not configured"

let sval=$OPTIND-1
shift $sval
option=${1:-start}

case $dispmode in
  screen) nc=nc; ncopt=$ncopts;;
  pterm) nc=nc; ncopt=$ncopts;;
  photon) nc='';;
  *) nl_error "Unknown dispmode: '$dispmode'";;
esac
logfileroot=$Experiment
interacts='Demodisp Democlt';
extracts='';
batchfile=interact
client=playbackclt
[ $srcmode = realtime ] && client=Democlt
lclsrvr=playbacksrvr

check_path=no
startup=no
case $option in
  start) startup=yes; check_path=yes;;
  stop);;
  not) startup=yes; batchfile=/dev/null;;
  wait) check_path=yes;;
  screen);;
  *) nl_error "Invalid option: '$option'";;
esac

# Determine the path. Strictly speaking, this does
# not have to happen before start, but I'd like
# to check that the required applications exist
VERSION=1.0
case $srcmode in
  playback)
    # Need to find the data
    ddir=$Run
    if [ ! -d $ddir ]; then
      for base in . $FltNd$HomeDir; do
        ddir=$base/$Run
        [ -d $ddir ] && break
        ddir=$base/raw/$Run
        [ -d $ddir ] && break
        for runtype in flight cal data junk; do
          ddir=$base/raw/$runtype/$Run
          [ -d $ddir ] && break
        done
        [ -d $ddir ] && break
      done
    fi
    [ -d $ddir ] || nl_error "Unable to locate run $Run"
    [ -f $ddir/VERSION ] && VERSION=`cat $ddir/VERSION`;;
  *)
    ddir=$FltNd$HomeDir
    [ -f VERSION ] && VERSION=`cat VERSION`;;
esac

if [ $check_path = yes ]; then
  missing=''
  for app in $interacts; do
    [ -x $TMBINDIR/$app$nc -o -x /usr/local/bin/$app$nc ] ||
      missing="$missing $app$nc"
  done
  for app in $extracts; do
    [ -x $TMBINDIR/$app -o -x /usr/local/bin/$app ] ||
      missing="$missing $app"
  done
  [ -n "$missing" ] &&
    nl_error "Unable to locate required application(s):$missing"
fi

function Launch {
  name=$1
  shift
  [ -n "$launch_error" ] && return 1
  if { $* & }; then
    Launch_pid=$!
    msg -Vn doit "Launch: $Launch_pid $*"
    if [ "$name" != "-" ]; then
      [ "$name" = "-TMC-" ] && name="/var/run/linkeng/run/$Experiment/$!"
      [ "${name#/}" = "$name" ] && name="/var/run/linkeng/$Experiment/$name"
      waitfor $name 10 || {
        msg -Vn doit "Launch namewait failure: $*"
        launch_error=yes
        return 1
      }
    fi
  else
    msg -Vn doit "Launch Error: $*"
    launch_error=yes
    return 1
  fi
  return 0
}

statusready=no
function isready {
  quiet=no
  [ "$1" = "quiet" ] && quiet=yes
  dasctl $TM_OPT -VS 2>&1 |
  ( while read j; do
      [ $quiet = no ] && echo $j
      sj=${j#* Status: Ready:}
      if [ "$j" != "$sj" ]; then
        exit 0
      fi
    done
    exit 1
  ) && statusready=yes
}

if [ $srcmode = realtime ]; then
  # SCRIPT_OVERRIDE is the name of a file that will
  # contain the name of the flight script and will
  # be read by flight.sh. Setting it to /dev/null
  # means we can write to it and it won't have any
  # effect.
  # [ -z "$SCRIPT_OVERRIDE" ] && SCRIPT_OVERRIDE=/dev/null
  logfile=$HomeDir/$logfileroot.log
else  # not realtime
  RemEx=$Experiment
  Experiment=$RemEx.PB.$session
  case $srcmode in
    InetIn) logfile=$logfileroot.II.log;;
    SerIn) logfile=$logfileroot.SI.log;;
    *) logfile=$logfileroot.PB.$session.log;;
  esac
fi

# override:
#   no: We don't need to override
#   req: Override is required
#   done: Override has been requested
override=no
dasctl_opt='-r'
if [ $startup = yes -a $srcmode = realtime ]; then
  [ -n "$batchfile" ] && dasctl_opt="-R $batchfile"
  if [ $SERVICE = AdHoc ]; then
    nl_error "AdHoc: Would startup flight.sh here"
  fi
  if [ $option = wait ]; then
    msg -Vn doit "Waiting for startup"
    while [ statusready = no ]; do
      isready quiet
      sleep 1
    done
  else
    isready quiet
    if [ $statusready = no ]; then
      dasctl -V $TM_OPT $dasctl_opt
      isready
    fi
  fi
  [ $statusready = no ] && nl_error "Startup failed"
# else
  # nl_error "Handle non-startup or non-realtime here"
fi

# waiting=no
# signaled=no
# fltshstarted=no
# while true; do
#   see_parent=no
#   # np < 2 means parent is not running
#   ppid=`pidin -n $FlightNode -p parent -fa 2>/dev/null | grep -v pid`
#   [ -n "$ppid" ] && see_parent=yes
#   if [ $see_parent = yes -o -z "$FltNd" ]; then
#     if [ ! -e $cmdsrvr ]; then
#       if [ $see_parent = yes ]; then
#         if [ $override = done -a ! -f $SCRIPT_OVERRIDE ]; then
#           if [ $option = not ]; then
#             exit 0
#           else
#             nl_error "Override observed but startup apparently failed"
#           fi
#         fi
#         [ $override = auto ] &&
#           nl_error "Default startup apparently failed"
#         if [ $signaled = yes ]; then
#           echo "ppid = '$ppid' cmdsrvr = '$cmdsrvr'"
#           nl_error "Parent w/o cmdsrvr after signaling"
#         fi
#       fi
#       if [ $startup = yes ]; then
#         [ $override = no ] && override=auto
#         if [ $see_parent = yes ]; then
#           # echo signaling parent
#           sudo /usr/local/sbin/signal_parent $FlightNode
#           signaled=yes
#           oppid=$ppid
#           ppid=`pidin -n $FlightNode -p parent -fa 2>/dev/null | grep -v pid`
#           nw=1
#           while [ -n "$ppid" -a "$ppid" = "$oppid" ]; do
#             [ $nw -ge 3 ] &&
#               nl_error Signaling parent failed
#             sleep 1
#             ppid=`pidin -n $FlightNode -p parent -fa 2>/dev/null | grep -v pid`
#             let nw=nw+1
#           done
#           [ -z "$FltNd" -a $option = not ] && exit 0
#         elif [ $srcmode = realtime ]; then
#           if [ $fltshstarted = no ]; then
#             if [ $dispmode = screen ]; then
#               echo "Starting flight.sh on /dev/con1"
#               on -t /dev/con1 /usr/local/sbin/flight.sh &
#             else
#               tty=`tty`
#               echo "Starting flight.sh in a pterm"
#               on -t $tty pterm /usr/local/sbin/flight.sh &
#             fi
#             fltshstarted=yes
#           fi
#         else
#           Launch memo memo -o $logfile 
#           Launch TM/DCo TMbfr
#           if [ $srcmode = playback ]; then
#             Launch DG/cmd rdr -P $ddir -a
#           elif [ $srcmode = InetIn ]; then
#             Launch DG/cmd InetIn
#           fi
#           Launch cmd/server $lclsrvr
#           if [ -n "$launch_error" ]; then
#             msg -Vn doit "Launch failed: cleaning up"
#             exec parent -qt1
#           fi
#         fi
#       elif [ $option = stop ]; then
#         nl_error "Could not locate $Experiment's command server"
#       fi
#     fi
#   fi
# 
#   if [ -e $cmdsrvr ]; then
#     case $option in
#       not)
#         nl_error "Instrument is in operation: quit first";;
#       stop)
#         echo "Quit" >$cmdsrvr
#         exit 0;;
#       start) break;;
#       wait) break;;
#       screen) break;;
#       *) nl_error "Unrecognized option '$option'";;
#     esac
#   fi
# 
#   if [ $waiting = no ]; then
#     echo "Waiting for parent or command server on node $FlightNode"
#     waiting=yes
#   fi
#   sleep 1
# done

rmt_cmd=''
[ $FltNode_Access = Remote ] && rmt_cmd='ssh -t $FlightNode'

# allocate consoles as necessary
case $dispmode in
  screen)
    if [ $option != screen ]; then
      rc=screenrc.$session
      { echo startup_message off
        echo split
        echo focus
        echo resize 3
        echo focus
        echo "screen -t $logfile /bin/sh -c \"echo \$\$ >less.pid.$session; exec $rmt_cmd less +F $logfile\""
        echo screen -t Demo /usr/local/sbin/getcon $gcopt scr1 $session
        echo width -w 20
        #echo height -w 8
  echo focus
  echo screen -t clt /usr/local/sbin/getcon $gcopt clt $session
  echo height -w 2
  echo width -w 80
  echo focus
        pbarg=''
        [ $srcmode = playback ] && pbarg=" -p $Run"
        echo screen -t doit $0 $pbarg $ncopt -sS $session screen
        echo select Demo
      } >$rc
      screen -c $rc
      clear
      rm $rc
      exit 0
    fi;;
  pterm)
    ### Start pterms for each disp screen and clt
    pterm -t Demo -m 8x20 -g 8x20 -U /usr/local/sbin/getcon $gcopt scr1 $session &
    pterm -t clt -m 2x80 -g 2x80 -y 90% -x 0 -U /usr/local/sbin/getcon $gcopt clt $session &
    ;;
  *)
esac
    
msg -Vndoit Handling less.pid.$session
pterm_pid=''
if [ $dispmode != screen ]; then
  pterm -t $logfile $rmt_cmd less +F $logfile &
  pterm_pid=$!
fi
if [ $dispmode = screen -a -f less.pid.$session ]; then
  # pterm_pid=`pidin -P less arg | grep -F "less +F $logfile" | head -n1`
  # pterm_pid=${pterm_pid% less +F $logfile}
  pterm_pid=`cat less.pid.$session`
  rm -f less.pid.$session
fi

# Now we want the display and client programs to
# talk to a local memo to avoid cluttering up
# the flight log
## This test can be made more robust
msg -Vndoit Conditionally starting memo
memo=/var/run/linkeng/$Experiment/memo
if [ ! -e $memo ]; then
  Launch memo memo -o $logfileroot.clt.log
fi

# Now collect display consoles for each disp screen and clt
msg -Vndoit collecting screens
for screen in scr1 clt; do
  term=''
  if [ $dispmode != photon ]; then
    waitfor pty.$screen.$session 3 ||
      nl_error pty.$screen.$session did not appear
    term=`cat pty.$screen.$session`
    rm pty.$screen.$session
  fi
  eval ${screen}_term=$term
done

Launch -TMC- Demodisp$nc $ncopt $TM_OPT $scr1_term
$client$nc $CMD_OPT $clt_term $scr1_term

# This is where we run. When the client quits,
# we are done and need to clean up

[ $dispmode != photon ] && /usr/local/sbin/getcon $CMD_OPT -V -e $session

# Leave the log up for a few seconds to view shutdown status
if [ -n "$pterm_pid" ]; then
  sleep 2
  kill $pterm_pid
  # wait a bit so parent needn't report the termination
  sleep 1
  echo "doit: Invoking parent for cleanup"
  exec parent -V -qt1
else
  echo "doit: Invoking parent for cleanup"
  exec parent -V -qt3
fi
